// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: receiver/receiver.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "receiver";

export interface SubmitFlagsRequest {
  flags: string[];
}

export interface FlagResponse {
  flag: string;
  verdict: FlagResponse_Verdict;
  message: string;
  victimId: bigint;
  serviceId: bigint;
  attackerDelta: number;
  victimDelta: number;
}

export const FlagResponse_Verdict = {
  VERDICT_UNSPECIFIED: 0,
  VERDICT_ACCEPTED: 1,
  VERDICT_OWN: 2,
  VERDICT_OLD: 3,
  VERDICT_INVALID: 4,
  VERDICT_DUPLICATE: 5,
} as const;

export type FlagResponse_Verdict = typeof FlagResponse_Verdict[keyof typeof FlagResponse_Verdict];

export namespace FlagResponse_Verdict {
  export type VERDICT_UNSPECIFIED = typeof FlagResponse_Verdict.VERDICT_UNSPECIFIED;
  export type VERDICT_ACCEPTED = typeof FlagResponse_Verdict.VERDICT_ACCEPTED;
  export type VERDICT_OWN = typeof FlagResponse_Verdict.VERDICT_OWN;
  export type VERDICT_OLD = typeof FlagResponse_Verdict.VERDICT_OLD;
  export type VERDICT_INVALID = typeof FlagResponse_Verdict.VERDICT_INVALID;
  export type VERDICT_DUPLICATE = typeof FlagResponse_Verdict.VERDICT_DUPLICATE;
}

export function flagResponse_VerdictFromJSON(object: any): FlagResponse_Verdict {
  switch (object) {
    case 0:
    case "VERDICT_UNSPECIFIED":
      return FlagResponse_Verdict.VERDICT_UNSPECIFIED;
    case 1:
    case "VERDICT_ACCEPTED":
      return FlagResponse_Verdict.VERDICT_ACCEPTED;
    case 2:
    case "VERDICT_OWN":
      return FlagResponse_Verdict.VERDICT_OWN;
    case 3:
    case "VERDICT_OLD":
      return FlagResponse_Verdict.VERDICT_OLD;
    case 4:
    case "VERDICT_INVALID":
      return FlagResponse_Verdict.VERDICT_INVALID;
    case 5:
    case "VERDICT_DUPLICATE":
      return FlagResponse_Verdict.VERDICT_DUPLICATE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum FlagResponse_Verdict");
  }
}

export function flagResponse_VerdictToJSON(object: FlagResponse_Verdict): string {
  switch (object) {
    case FlagResponse_Verdict.VERDICT_UNSPECIFIED:
      return "VERDICT_UNSPECIFIED";
    case FlagResponse_Verdict.VERDICT_ACCEPTED:
      return "VERDICT_ACCEPTED";
    case FlagResponse_Verdict.VERDICT_OWN:
      return "VERDICT_OWN";
    case FlagResponse_Verdict.VERDICT_OLD:
      return "VERDICT_OLD";
    case FlagResponse_Verdict.VERDICT_INVALID:
      return "VERDICT_INVALID";
    case FlagResponse_Verdict.VERDICT_DUPLICATE:
      return "VERDICT_DUPLICATE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum FlagResponse_Verdict");
  }
}

export interface State {
  services: State_Service[];
}

export interface State_Team {
  id: bigint;
  points: number;
  stolenFlags: bigint;
  lostFlags: bigint;
}

export interface State_Service {
  id: bigint;
  teams: State_Team[];
}

export interface SubmitFlagsResponse {
  responses: FlagResponse[];
}

export interface GetStateRequest {
}

export interface GetStateResponse {
  state: State | undefined;
}

function createBaseSubmitFlagsRequest(): SubmitFlagsRequest {
  return { flags: [] };
}

export const SubmitFlagsRequest: MessageFns<SubmitFlagsRequest> = {
  encode(message: SubmitFlagsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.flags) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitFlagsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitFlagsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<SubmitFlagsRequest, Uint8Array>
  async *encodeTransform(
    source:
      | AsyncIterable<SubmitFlagsRequest | SubmitFlagsRequest[]>
      | Iterable<SubmitFlagsRequest | SubmitFlagsRequest[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [SubmitFlagsRequest.encode(p).finish()];
        }
      } else {
        yield* [SubmitFlagsRequest.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, SubmitFlagsRequest>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<SubmitFlagsRequest> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [SubmitFlagsRequest.decode(p)];
        }
      } else {
        yield* [SubmitFlagsRequest.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): SubmitFlagsRequest {
    return { flags: globalThis.Array.isArray(object?.flags) ? object.flags.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: SubmitFlagsRequest): unknown {
    const obj: any = {};
    if (message.flags?.length) {
      obj.flags = message.flags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitFlagsRequest>, I>>(base?: I): SubmitFlagsRequest {
    return SubmitFlagsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitFlagsRequest>, I>>(object: I): SubmitFlagsRequest {
    const message = createBaseSubmitFlagsRequest();
    message.flags = object.flags?.map((e) => e) || [];
    return message;
  },
};

function createBaseFlagResponse(): FlagResponse {
  return { flag: "", verdict: 0, message: "", victimId: 0n, serviceId: 0n, attackerDelta: 0, victimDelta: 0 };
}

export const FlagResponse: MessageFns<FlagResponse> = {
  encode(message: FlagResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flag !== "") {
      writer.uint32(10).string(message.flag);
    }
    if (message.verdict !== 0) {
      writer.uint32(16).int32(message.verdict);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    if (message.victimId !== 0n) {
      if (BigInt.asIntN(64, message.victimId) !== message.victimId) {
        throw new globalThis.Error("value provided for field message.victimId of type int64 too large");
      }
      writer.uint32(32).int64(message.victimId);
    }
    if (message.serviceId !== 0n) {
      if (BigInt.asIntN(64, message.serviceId) !== message.serviceId) {
        throw new globalThis.Error("value provided for field message.serviceId of type int64 too large");
      }
      writer.uint32(40).int64(message.serviceId);
    }
    if (message.attackerDelta !== 0) {
      writer.uint32(49).double(message.attackerDelta);
    }
    if (message.victimDelta !== 0) {
      writer.uint32(57).double(message.victimDelta);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.verdict = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.victimId = reader.int64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.serviceId = reader.int64() as bigint;
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.attackerDelta = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.victimDelta = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<FlagResponse, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<FlagResponse | FlagResponse[]> | Iterable<FlagResponse | FlagResponse[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [FlagResponse.encode(p).finish()];
        }
      } else {
        yield* [FlagResponse.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, FlagResponse>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<FlagResponse> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [FlagResponse.decode(p)];
        }
      } else {
        yield* [FlagResponse.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): FlagResponse {
    return {
      flag: isSet(object.flag) ? globalThis.String(object.flag) : "",
      verdict: isSet(object.verdict) ? flagResponse_VerdictFromJSON(object.verdict) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      victimId: isSet(object.victimId) ? BigInt(object.victimId) : 0n,
      serviceId: isSet(object.serviceId) ? BigInt(object.serviceId) : 0n,
      attackerDelta: isSet(object.attackerDelta) ? globalThis.Number(object.attackerDelta) : 0,
      victimDelta: isSet(object.victimDelta) ? globalThis.Number(object.victimDelta) : 0,
    };
  },

  toJSON(message: FlagResponse): unknown {
    const obj: any = {};
    if (message.flag !== "") {
      obj.flag = message.flag;
    }
    if (message.verdict !== 0) {
      obj.verdict = flagResponse_VerdictToJSON(message.verdict);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.victimId !== 0n) {
      obj.victimId = message.victimId.toString();
    }
    if (message.serviceId !== 0n) {
      obj.serviceId = message.serviceId.toString();
    }
    if (message.attackerDelta !== 0) {
      obj.attackerDelta = message.attackerDelta;
    }
    if (message.victimDelta !== 0) {
      obj.victimDelta = message.victimDelta;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FlagResponse>, I>>(base?: I): FlagResponse {
    return FlagResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FlagResponse>, I>>(object: I): FlagResponse {
    const message = createBaseFlagResponse();
    message.flag = object.flag ?? "";
    message.verdict = object.verdict ?? 0;
    message.message = object.message ?? "";
    message.victimId = object.victimId ?? 0n;
    message.serviceId = object.serviceId ?? 0n;
    message.attackerDelta = object.attackerDelta ?? 0;
    message.victimDelta = object.victimDelta ?? 0;
    return message;
  },
};

function createBaseState(): State {
  return { services: [] };
}

export const State: MessageFns<State> = {
  encode(message: State, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.services) {
      State_Service.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.services.push(State_Service.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<State, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<State | State[]> | Iterable<State | State[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [State.encode(p).finish()];
        }
      } else {
        yield* [State.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, State>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<State> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [State.decode(p)];
        }
      } else {
        yield* [State.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): State {
    return {
      services: globalThis.Array.isArray(object?.services)
        ? object.services.map((e: any) => State_Service.fromJSON(e))
        : [],
    };
  },

  toJSON(message: State): unknown {
    const obj: any = {};
    if (message.services?.length) {
      obj.services = message.services.map((e) => State_Service.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<State>, I>>(base?: I): State {
    return State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<State>, I>>(object: I): State {
    const message = createBaseState();
    message.services = object.services?.map((e) => State_Service.fromPartial(e)) || [];
    return message;
  },
};

function createBaseState_Team(): State_Team {
  return { id: 0n, points: 0, stolenFlags: 0n, lostFlags: 0n };
}

export const State_Team: MessageFns<State_Team> = {
  encode(message: State_Team, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0n) {
      if (BigInt.asIntN(64, message.id) !== message.id) {
        throw new globalThis.Error("value provided for field message.id of type int64 too large");
      }
      writer.uint32(8).int64(message.id);
    }
    if (message.points !== 0) {
      writer.uint32(17).double(message.points);
    }
    if (message.stolenFlags !== 0n) {
      if (BigInt.asIntN(64, message.stolenFlags) !== message.stolenFlags) {
        throw new globalThis.Error("value provided for field message.stolenFlags of type int64 too large");
      }
      writer.uint32(24).int64(message.stolenFlags);
    }
    if (message.lostFlags !== 0n) {
      if (BigInt.asIntN(64, message.lostFlags) !== message.lostFlags) {
        throw new globalThis.Error("value provided for field message.lostFlags of type int64 too large");
      }
      writer.uint32(32).int64(message.lostFlags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State_Team {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState_Team();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as bigint;
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.points = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.stolenFlags = reader.int64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lostFlags = reader.int64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<State_Team, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<State_Team | State_Team[]> | Iterable<State_Team | State_Team[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [State_Team.encode(p).finish()];
        }
      } else {
        yield* [State_Team.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, State_Team>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<State_Team> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [State_Team.decode(p)];
        }
      } else {
        yield* [State_Team.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): State_Team {
    return {
      id: isSet(object.id) ? BigInt(object.id) : 0n,
      points: isSet(object.points) ? globalThis.Number(object.points) : 0,
      stolenFlags: isSet(object.stolenFlags) ? BigInt(object.stolenFlags) : 0n,
      lostFlags: isSet(object.lostFlags) ? BigInt(object.lostFlags) : 0n,
    };
  },

  toJSON(message: State_Team): unknown {
    const obj: any = {};
    if (message.id !== 0n) {
      obj.id = message.id.toString();
    }
    if (message.points !== 0) {
      obj.points = message.points;
    }
    if (message.stolenFlags !== 0n) {
      obj.stolenFlags = message.stolenFlags.toString();
    }
    if (message.lostFlags !== 0n) {
      obj.lostFlags = message.lostFlags.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<State_Team>, I>>(base?: I): State_Team {
    return State_Team.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<State_Team>, I>>(object: I): State_Team {
    const message = createBaseState_Team();
    message.id = object.id ?? 0n;
    message.points = object.points ?? 0;
    message.stolenFlags = object.stolenFlags ?? 0n;
    message.lostFlags = object.lostFlags ?? 0n;
    return message;
  },
};

function createBaseState_Service(): State_Service {
  return { id: 0n, teams: [] };
}

export const State_Service: MessageFns<State_Service> = {
  encode(message: State_Service, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0n) {
      if (BigInt.asIntN(64, message.id) !== message.id) {
        throw new globalThis.Error("value provided for field message.id of type int64 too large");
      }
      writer.uint32(8).int64(message.id);
    }
    for (const v of message.teams) {
      State_Team.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State_Service {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState_Service();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as bigint;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.teams.push(State_Team.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<State_Service, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<State_Service | State_Service[]> | Iterable<State_Service | State_Service[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [State_Service.encode(p).finish()];
        }
      } else {
        yield* [State_Service.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, State_Service>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<State_Service> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [State_Service.decode(p)];
        }
      } else {
        yield* [State_Service.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): State_Service {
    return {
      id: isSet(object.id) ? BigInt(object.id) : 0n,
      teams: globalThis.Array.isArray(object?.teams) ? object.teams.map((e: any) => State_Team.fromJSON(e)) : [],
    };
  },

  toJSON(message: State_Service): unknown {
    const obj: any = {};
    if (message.id !== 0n) {
      obj.id = message.id.toString();
    }
    if (message.teams?.length) {
      obj.teams = message.teams.map((e) => State_Team.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<State_Service>, I>>(base?: I): State_Service {
    return State_Service.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<State_Service>, I>>(object: I): State_Service {
    const message = createBaseState_Service();
    message.id = object.id ?? 0n;
    message.teams = object.teams?.map((e) => State_Team.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSubmitFlagsResponse(): SubmitFlagsResponse {
  return { responses: [] };
}

export const SubmitFlagsResponse: MessageFns<SubmitFlagsResponse> = {
  encode(message: SubmitFlagsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.responses) {
      FlagResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitFlagsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitFlagsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.responses.push(FlagResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<SubmitFlagsResponse, Uint8Array>
  async *encodeTransform(
    source:
      | AsyncIterable<SubmitFlagsResponse | SubmitFlagsResponse[]>
      | Iterable<SubmitFlagsResponse | SubmitFlagsResponse[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [SubmitFlagsResponse.encode(p).finish()];
        }
      } else {
        yield* [SubmitFlagsResponse.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, SubmitFlagsResponse>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<SubmitFlagsResponse> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [SubmitFlagsResponse.decode(p)];
        }
      } else {
        yield* [SubmitFlagsResponse.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): SubmitFlagsResponse {
    return {
      responses: globalThis.Array.isArray(object?.responses)
        ? object.responses.map((e: any) => FlagResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SubmitFlagsResponse): unknown {
    const obj: any = {};
    if (message.responses?.length) {
      obj.responses = message.responses.map((e) => FlagResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitFlagsResponse>, I>>(base?: I): SubmitFlagsResponse {
    return SubmitFlagsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitFlagsResponse>, I>>(object: I): SubmitFlagsResponse {
    const message = createBaseSubmitFlagsResponse();
    message.responses = object.responses?.map((e) => FlagResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetStateRequest(): GetStateRequest {
  return {};
}

export const GetStateRequest: MessageFns<GetStateRequest> = {
  encode(_: GetStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<GetStateRequest, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<GetStateRequest | GetStateRequest[]> | Iterable<GetStateRequest | GetStateRequest[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [GetStateRequest.encode(p).finish()];
        }
      } else {
        yield* [GetStateRequest.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, GetStateRequest>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<GetStateRequest> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [GetStateRequest.decode(p)];
        }
      } else {
        yield* [GetStateRequest.decode(pkt as any)];
      }
    }
  },

  fromJSON(_: any): GetStateRequest {
    return {};
  },

  toJSON(_: GetStateRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStateRequest>, I>>(base?: I): GetStateRequest {
    return GetStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStateRequest>, I>>(_: I): GetStateRequest {
    const message = createBaseGetStateRequest();
    return message;
  },
};

function createBaseGetStateResponse(): GetStateResponse {
  return { state: undefined };
}

export const GetStateResponse: MessageFns<GetStateResponse> = {
  encode(message: GetStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== undefined) {
      State.encode(message.state, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.state = State.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  // encodeTransform encodes a source of message objects.
  // Transform<GetStateResponse, Uint8Array>
  async *encodeTransform(
    source: AsyncIterable<GetStateResponse | GetStateResponse[]> | Iterable<GetStateResponse | GetStateResponse[]>,
  ): AsyncIterable<Uint8Array> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [GetStateResponse.encode(p).finish()];
        }
      } else {
        yield* [GetStateResponse.encode(pkt as any).finish()];
      }
    }
  },

  // decodeTransform decodes a source of encoded messages.
  // Transform<Uint8Array, GetStateResponse>
  async *decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<GetStateResponse> {
    for await (const pkt of source) {
      if (globalThis.Array.isArray(pkt)) {
        for (const p of (pkt as any)) {
          yield* [GetStateResponse.decode(p)];
        }
      } else {
        yield* [GetStateResponse.decode(pkt as any)];
      }
    }
  },

  fromJSON(object: any): GetStateResponse {
    return { state: isSet(object.state) ? State.fromJSON(object.state) : undefined };
  },

  toJSON(message: GetStateResponse): unknown {
    const obj: any = {};
    if (message.state !== undefined) {
      obj.state = State.toJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetStateResponse>, I>>(base?: I): GetStateResponse {
    return GetStateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetStateResponse>, I>>(object: I): GetStateResponse {
    const message = createBaseGetStateResponse();
    message.state = (object.state !== undefined && object.state !== null) ? State.fromPartial(object.state) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  encodeTransform(source: AsyncIterable<T | T[]> | Iterable<T | T[]>): AsyncIterable<Uint8Array>;
  decodeTransform(
    source: AsyncIterable<Uint8Array | Uint8Array[]> | Iterable<Uint8Array | Uint8Array[]>,
  ): AsyncIterable<T>;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
