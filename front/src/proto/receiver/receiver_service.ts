// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: receiver/receiver_service.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { GetStateRequest, GetStateResponse, SubmitFlagsRequest, SubmitFlagsResponse } from "./receiver";

export const protobufPackage = "receiver";

export type ReceiverServiceDefinition = typeof ReceiverServiceDefinition;
export const ReceiverServiceDefinition = {
  name: "ReceiverService",
  fullName: "receiver.ReceiverService",
  methods: {
    submitFlags: {
      name: "SubmitFlags",
      requestType: SubmitFlagsRequest,
      requestStream: false,
      responseType: SubmitFlagsResponse,
      responseStream: false,
      options: {},
    },
    getState: {
      name: "GetState",
      requestType: GetStateRequest,
      requestStream: false,
      responseType: GetStateResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ReceiverServiceImplementation<CallContextExt = {}> {
  submitFlags(
    request: SubmitFlagsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SubmitFlagsResponse>>;
  getState(request: GetStateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetStateResponse>>;
}

export interface ReceiverServiceClient<CallOptionsExt = {}> {
  submitFlags(
    request: DeepPartial<SubmitFlagsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SubmitFlagsResponse>;
  getState(request: DeepPartial<GetStateRequest>, options?: CallOptions & CallOptionsExt): Promise<GetStateResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
